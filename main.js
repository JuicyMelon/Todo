(()=>{"use strict";var t={d:(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{VERSION:()=>o,after:()=>Ne,all:()=>tn,allKeys:()=>yt,any:()=>en,assign:()=>Nt,before:()=>Me,bind:()=>Se,bindAll:()=>Ce,chain:()=>me,chunk:()=>Dn,clone:()=>Dt,collect:()=>He,compact:()=>Tn,compose:()=>Pe,constant:()=>Q,contains:()=>nn,countBy:()=>vn,create:()=>Bt,debounce:()=>Oe,default:()=>Rn,defaults:()=>Mt,defer:()=>Le,delay:()=>Te,detect:()=>Ue,difference:()=>kn,drop:()=>Cn,each:()=>Xe,escape:()=>ue,every:()=>tn,extend:()=>Pt,extendOwn:()=>Nt,filter:()=>Qe,find:()=>Ue,findIndex:()=>Fe,findKey:()=>Be,findLastIndex:()=>Je,findWhere:()=>We,first:()=>xn,flatten:()=>Ln,foldl:()=>Ye,foldr:()=>Ge,forEach:()=>Xe,functions:()=>_t,get:()=>zt,groupBy:()=>pn,has:()=>$t,head:()=>xn,identity:()=>Ut,include:()=>nn,includes:()=>nn,indexBy:()=>hn,indexOf:()=>ze,initial:()=>An,inject:()=>Ye,intersection:()=>Pn,invert:()=>Ot,invoke:()=>rn,isArguments:()=>K,isArray:()=>W,isArrayBuffer:()=>B,isBoolean:()=>L,isDataView:()=>U,isDate:()=>P,isElement:()=>k,isEmpty:()=>ct,isEqual:()=>vt,isError:()=>M,isFinite:()=>Y,isFunction:()=>J,isMap:()=>xt,isMatch:()=>at,isNaN:()=>G,isNull:()=>E,isNumber:()=>I,isObject:()=>C,isRegExp:()=>N,isSet:()=>Et,isString:()=>_,isSymbol:()=>q,isTypedArray:()=>ot,isUndefined:()=>T,isWeakMap:()=>Ct,isWeakSet:()=>Tt,iteratee:()=>Yt,keys:()=>lt,last:()=>En,lastIndexOf:()=>$e,map:()=>He,mapObject:()=>Qt,matcher:()=>Wt,matches:()=>Wt,max:()=>ln,memoize:()=>Ee,methods:()=>_t,min:()=>cn,mixin:()=>Jn,negate:()=>Ie,noop:()=>Zt,now:()=>re,object:()=>qn,omit:()=>Sn,once:()=>qe,pairs:()=>kt,partial:()=>we,partition:()=>yn,pick:()=>wn,pluck:()=>on,property:()=>Xt,propertyOf:()=>te,random:()=>ne,range:()=>Bn,reduce:()=>Ye,reduceRight:()=>Ge,reject:()=>Ze,rest:()=>Cn,restArguments:()=>x,result:()=>ve,sample:()=>an,select:()=>Qe,shuffle:()=>fn,size:()=>bn,some:()=>en,sortBy:()=>sn,sortedIndex:()=>Re,tail:()=>Cn,take:()=>xn,tap:()=>Ft,template:()=>he,templateSettings:()=>ce,throttle:()=>ke,times:()=>ee,toArray:()=>mn,toPath:()=>Jt,transpose:()=>Nn,unescape:()=>le,union:()=>In,uniq:()=>_n,unique:()=>_n,uniqueId:()=>ge,unzip:()=>Nn,values:()=>Lt,where:()=>un,without:()=>On,wrap:()=>_e,zip:()=>Mn});let n=class{constructor(t,e,n,r){this.title=t,this.description=e,this.dueDate=n,this.priority=r}},r=class{constructor(t){this.title=t,this.list=[]}addTodo(t){this.list.push(t)}deleteTodo(t){let e="Error: no todo of that value in the project";for(let n=0;n<this.list.length;n++)this.list[n]===t&&(e=n);"string"!=typeof e?this.list.splice(e,1):console.log(e)}};var o="1.13.1",i="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||Function("return this")()||{},u=Array.prototype,l=Object.prototype,c="undefined"!=typeof Symbol?Symbol.prototype:null,a=u.push,f=u.slice,s=l.toString,d=l.hasOwnProperty,p="undefined"!=typeof ArrayBuffer,h="undefined"!=typeof DataView,v=Array.isArray,y=Object.keys,g=Object.create,m=p&&ArrayBuffer.isView,b=isNaN,j=isFinite,w=!{toString:null}.propertyIsEnumerable("toString"),S=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],A=Math.pow(2,53)-1;function x(t,e){return e=null==e?t.length-1:+e,function(){for(var n=Math.max(arguments.length-e,0),r=Array(n),o=0;o<n;o++)r[o]=arguments[o+e];switch(e){case 0:return t.call(this,r);case 1:return t.call(this,arguments[0],r);case 2:return t.call(this,arguments[0],arguments[1],r)}var i=Array(e+1);for(o=0;o<e;o++)i[o]=arguments[o];return i[e]=r,t.apply(this,i)}}function C(t){var e=typeof t;return"function"===e||"object"===e&&!!t}function E(t){return null===t}function T(t){return void 0===t}function L(t){return!0===t||!1===t||"[object Boolean]"===s.call(t)}function k(t){return!(!t||1!==t.nodeType)}function O(t){var e="[object "+t+"]";return function(t){return s.call(t)===e}}const _=O("String"),I=O("Number"),P=O("Date"),N=O("RegExp"),M=O("Error"),q=O("Symbol"),B=O("ArrayBuffer");var D=O("Function"),F=i.document&&i.document.childNodes;"object"!=typeof Int8Array&&"function"!=typeof F&&(D=function(t){return"function"==typeof t||!1});const J=D,R=O("Object");var V=h&&R(new DataView(new ArrayBuffer(8))),z="undefined"!=typeof Map&&R(new Map),$=O("DataView");const U=V?function(t){return null!=t&&J(t.getInt8)&&B(t.buffer)}:$,W=v||O("Array");function X(t,e){return null!=t&&d.call(t,e)}var H=O("Arguments");!function(){H(arguments)||(H=function(t){return X(t,"callee")})}();const K=H;function Y(t){return!q(t)&&j(t)&&!isNaN(parseFloat(t))}function G(t){return I(t)&&b(t)}function Q(t){return function(){return t}}function Z(t){return function(e){var n=t(e);return"number"==typeof n&&n>=0&&n<=A}}function tt(t){return function(e){return null==e?void 0:e[t]}}const et=tt("byteLength"),nt=Z(et);var rt=/\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;const ot=p?function(t){return m?m(t)&&!U(t):nt(t)&&rt.test(s.call(t))}:Q(!1),it=tt("length");function ut(t,e){e=function(t){for(var e={},n=t.length,r=0;r<n;++r)e[t[r]]=!0;return{contains:function(t){return e[t]},push:function(n){return e[n]=!0,t.push(n)}}}(e);var n=S.length,r=t.constructor,o=J(r)&&r.prototype||l,i="constructor";for(X(t,i)&&!e.contains(i)&&e.push(i);n--;)(i=S[n])in t&&t[i]!==o[i]&&!e.contains(i)&&e.push(i)}function lt(t){if(!C(t))return[];if(y)return y(t);var e=[];for(var n in t)X(t,n)&&e.push(n);return w&&ut(t,e),e}function ct(t){if(null==t)return!0;var e=it(t);return"number"==typeof e&&(W(t)||_(t)||K(t))?0===e:0===it(lt(t))}function at(t,e){var n=lt(e),r=n.length;if(null==t)return!r;for(var o=Object(t),i=0;i<r;i++){var u=n[i];if(e[u]!==o[u]||!(u in o))return!1}return!0}function ft(t){return t instanceof ft?t:this instanceof ft?void(this._wrapped=t):new ft(t)}function st(t){return new Uint8Array(t.buffer||t,t.byteOffset||0,et(t))}ft.VERSION=o,ft.prototype.value=function(){return this._wrapped},ft.prototype.valueOf=ft.prototype.toJSON=ft.prototype.value,ft.prototype.toString=function(){return String(this._wrapped)};var dt="[object DataView]";function pt(t,e,n,r){if(t===e)return 0!==t||1/t==1/e;if(null==t||null==e)return!1;if(t!=t)return e!=e;var o=typeof t;return("function"===o||"object"===o||"object"==typeof e)&&ht(t,e,n,r)}function ht(t,e,n,r){t instanceof ft&&(t=t._wrapped),e instanceof ft&&(e=e._wrapped);var o=s.call(t);if(o!==s.call(e))return!1;if(V&&"[object Object]"==o&&U(t)){if(!U(e))return!1;o=dt}switch(o){case"[object RegExp]":case"[object String]":return""+t==""+e;case"[object Number]":return+t!=+t?+e!=+e:0==+t?1/+t==1/e:+t==+e;case"[object Date]":case"[object Boolean]":return+t==+e;case"[object Symbol]":return c.valueOf.call(t)===c.valueOf.call(e);case"[object ArrayBuffer]":case dt:return ht(st(t),st(e),n,r)}var i="[object Array]"===o;if(!i&&ot(t)){if(et(t)!==et(e))return!1;if(t.buffer===e.buffer&&t.byteOffset===e.byteOffset)return!0;i=!0}if(!i){if("object"!=typeof t||"object"!=typeof e)return!1;var u=t.constructor,l=e.constructor;if(u!==l&&!(J(u)&&u instanceof u&&J(l)&&l instanceof l)&&"constructor"in t&&"constructor"in e)return!1}r=r||[];for(var a=(n=n||[]).length;a--;)if(n[a]===t)return r[a]===e;if(n.push(t),r.push(e),i){if((a=t.length)!==e.length)return!1;for(;a--;)if(!pt(t[a],e[a],n,r))return!1}else{var f,d=lt(t);if(a=d.length,lt(e).length!==a)return!1;for(;a--;)if(!X(e,f=d[a])||!pt(t[f],e[f],n,r))return!1}return n.pop(),r.pop(),!0}function vt(t,e){return pt(t,e)}function yt(t){if(!C(t))return[];var e=[];for(var n in t)e.push(n);return w&&ut(t,e),e}function gt(t){var e=it(t);return function(n){if(null==n)return!1;var r=yt(n);if(it(r))return!1;for(var o=0;o<e;o++)if(!J(n[t[o]]))return!1;return t!==St||!J(n[mt])}}var mt="forEach",bt=["clear","delete"],jt=["get","has","set"],wt=bt.concat(mt,jt),St=bt.concat(jt),At=["add"].concat(bt,mt,"has");const xt=z?gt(wt):O("Map"),Ct=z?gt(St):O("WeakMap"),Et=z?gt(At):O("Set"),Tt=O("WeakSet");function Lt(t){for(var e=lt(t),n=e.length,r=Array(n),o=0;o<n;o++)r[o]=t[e[o]];return r}function kt(t){for(var e=lt(t),n=e.length,r=Array(n),o=0;o<n;o++)r[o]=[e[o],t[e[o]]];return r}function Ot(t){for(var e={},n=lt(t),r=0,o=n.length;r<o;r++)e[t[n[r]]]=n[r];return e}function _t(t){var e=[];for(var n in t)J(t[n])&&e.push(n);return e.sort()}function It(t,e){return function(n){var r=arguments.length;if(e&&(n=Object(n)),r<2||null==n)return n;for(var o=1;o<r;o++)for(var i=arguments[o],u=t(i),l=u.length,c=0;c<l;c++){var a=u[c];e&&void 0!==n[a]||(n[a]=i[a])}return n}}const Pt=It(yt),Nt=It(lt),Mt=It(yt,!0);function qt(t){if(!C(t))return{};if(g)return g(t);var e=function(){};e.prototype=t;var n=new e;return e.prototype=null,n}function Bt(t,e){var n=qt(t);return e&&Nt(n,e),n}function Dt(t){return C(t)?W(t)?t.slice():Pt({},t):t}function Ft(t,e){return e(t),t}function Jt(t){return W(t)?t:[t]}function Rt(t){return ft.toPath(t)}function Vt(t,e){for(var n=e.length,r=0;r<n;r++){if(null==t)return;t=t[e[r]]}return n?t:void 0}function zt(t,e,n){var r=Vt(t,Rt(e));return T(r)?n:r}function $t(t,e){for(var n=(e=Rt(e)).length,r=0;r<n;r++){var o=e[r];if(!X(t,o))return!1;t=t[o]}return!!n}function Ut(t){return t}function Wt(t){return t=Nt({},t),function(e){return at(e,t)}}function Xt(t){return t=Rt(t),function(e){return Vt(e,t)}}function Ht(t,e,n){if(void 0===e)return t;switch(null==n?3:n){case 1:return function(n){return t.call(e,n)};case 3:return function(n,r,o){return t.call(e,n,r,o)};case 4:return function(n,r,o,i){return t.call(e,n,r,o,i)}}return function(){return t.apply(e,arguments)}}function Kt(t,e,n){return null==t?Ut:J(t)?Ht(t,e,n):C(t)&&!W(t)?Wt(t):Xt(t)}function Yt(t,e){return Kt(t,e,1/0)}function Gt(t,e,n){return ft.iteratee!==Yt?ft.iteratee(t,e):Kt(t,e,n)}function Qt(t,e,n){e=Gt(e,n);for(var r=lt(t),o=r.length,i={},u=0;u<o;u++){var l=r[u];i[l]=e(t[l],l,t)}return i}function Zt(){}function te(t){return null==t?Zt:function(e){return zt(t,e)}}function ee(t,e,n){var r=Array(Math.max(0,t));e=Ht(e,n,1);for(var o=0;o<t;o++)r[o]=e(o);return r}function ne(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))}ft.toPath=Jt,ft.iteratee=Yt;const re=Date.now||function(){return(new Date).getTime()};function oe(t){var e=function(e){return t[e]},n="(?:"+lt(t).join("|")+")",r=RegExp(n),o=RegExp(n,"g");return function(t){return t=null==t?"":""+t,r.test(t)?t.replace(o,e):t}}const ie={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},ue=oe(ie),le=oe(Ot(ie)),ce=ft.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var ae=/(.)^/,fe={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},se=/\\|'|\r|\n|\u2028|\u2029/g;function de(t){return"\\"+fe[t]}var pe=/^\s*(\w|\$)+\s*$/;function he(t,e,n){!e&&n&&(e=n),e=Mt({},e,ft.templateSettings);var r=RegExp([(e.escape||ae).source,(e.interpolate||ae).source,(e.evaluate||ae).source].join("|")+"|$","g"),o=0,i="__p+='";t.replace(r,(function(e,n,r,u,l){return i+=t.slice(o,l).replace(se,de),o=l+e.length,n?i+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":r?i+="'+\n((__t=("+r+"))==null?'':__t)+\n'":u&&(i+="';\n"+u+"\n__p+='"),e})),i+="';\n";var u,l=e.variable;if(l){if(!pe.test(l))throw new Error("variable is not a bare identifier: "+l)}else i="with(obj||{}){\n"+i+"}\n",l="obj";i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{u=new Function(l,"_",i)}catch(t){throw t.source=i,t}var c=function(t){return u.call(this,t,ft)};return c.source="function("+l+"){\n"+i+"}",c}function ve(t,e,n){var r=(e=Rt(e)).length;if(!r)return J(n)?n.call(t):n;for(var o=0;o<r;o++){var i=null==t?void 0:t[e[o]];void 0===i&&(i=n,o=r),t=J(i)?i.call(t):i}return t}var ye=0;function ge(t){var e=++ye+"";return t?t+e:e}function me(t){var e=ft(t);return e._chain=!0,e}function be(t,e,n,r,o){if(!(r instanceof e))return t.apply(n,o);var i=qt(t.prototype),u=t.apply(i,o);return C(u)?u:i}var je=x((function(t,e){var n=je.placeholder,r=function(){for(var o=0,i=e.length,u=Array(i),l=0;l<i;l++)u[l]=e[l]===n?arguments[o++]:e[l];for(;o<arguments.length;)u.push(arguments[o++]);return be(t,r,this,this,u)};return r}));je.placeholder=ft;const we=je,Se=x((function(t,e,n){if(!J(t))throw new TypeError("Bind must be called on a function");var r=x((function(o){return be(t,r,e,this,n.concat(o))}));return r})),Ae=Z(it);function xe(t,e,n,r){if(r=r||[],e||0===e){if(e<=0)return r.concat(t)}else e=1/0;for(var o=r.length,i=0,u=it(t);i<u;i++){var l=t[i];if(Ae(l)&&(W(l)||K(l)))if(e>1)xe(l,e-1,n,r),o=r.length;else for(var c=0,a=l.length;c<a;)r[o++]=l[c++];else n||(r[o++]=l)}return r}const Ce=x((function(t,e){var n=(e=xe(e,!1,!1)).length;if(n<1)throw new Error("bindAll must be passed function names");for(;n--;){var r=e[n];t[r]=Se(t[r],t)}return t}));function Ee(t,e){var n=function(r){var o=n.cache,i=""+(e?e.apply(this,arguments):r);return X(o,i)||(o[i]=t.apply(this,arguments)),o[i]};return n.cache={},n}const Te=x((function(t,e,n){return setTimeout((function(){return t.apply(null,n)}),e)})),Le=we(Te,ft,1);function ke(t,e,n){var r,o,i,u,l=0;n||(n={});var c=function(){l=!1===n.leading?0:re(),r=null,u=t.apply(o,i),r||(o=i=null)},a=function(){var a=re();l||!1!==n.leading||(l=a);var f=e-(a-l);return o=this,i=arguments,f<=0||f>e?(r&&(clearTimeout(r),r=null),l=a,u=t.apply(o,i),r||(o=i=null)):r||!1===n.trailing||(r=setTimeout(c,f)),u};return a.cancel=function(){clearTimeout(r),l=0,r=o=i=null},a}function Oe(t,e,n){var r,o,i,u,l,c=function(){var a=re()-o;e>a?r=setTimeout(c,e-a):(r=null,n||(u=t.apply(l,i)),r||(i=l=null))},a=x((function(a){return l=this,i=a,o=re(),r||(r=setTimeout(c,e),n&&(u=t.apply(l,i))),u}));return a.cancel=function(){clearTimeout(r),r=i=l=null},a}function _e(t,e){return we(e,t)}function Ie(t){return function(){return!t.apply(this,arguments)}}function Pe(){var t=arguments,e=t.length-1;return function(){for(var n=e,r=t[e].apply(this,arguments);n--;)r=t[n].call(this,r);return r}}function Ne(t,e){return function(){if(--t<1)return e.apply(this,arguments)}}function Me(t,e){var n;return function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=null),n}}const qe=we(Me,2);function Be(t,e,n){e=Gt(e,n);for(var r,o=lt(t),i=0,u=o.length;i<u;i++)if(e(t[r=o[i]],r,t))return r}function De(t){return function(e,n,r){n=Gt(n,r);for(var o=it(e),i=t>0?0:o-1;i>=0&&i<o;i+=t)if(n(e[i],i,e))return i;return-1}}const Fe=De(1),Je=De(-1);function Re(t,e,n,r){for(var o=(n=Gt(n,r,1))(e),i=0,u=it(t);i<u;){var l=Math.floor((i+u)/2);n(t[l])<o?i=l+1:u=l}return i}function Ve(t,e,n){return function(r,o,i){var u=0,l=it(r);if("number"==typeof i)t>0?u=i>=0?i:Math.max(i+l,u):l=i>=0?Math.min(i+1,l):i+l+1;else if(n&&i&&l)return r[i=n(r,o)]===o?i:-1;if(o!=o)return(i=e(f.call(r,u,l),G))>=0?i+u:-1;for(i=t>0?u:l-1;i>=0&&i<l;i+=t)if(r[i]===o)return i;return-1}}const ze=Ve(1,Fe,Re),$e=Ve(-1,Je);function Ue(t,e,n){var r=(Ae(t)?Fe:Be)(t,e,n);if(void 0!==r&&-1!==r)return t[r]}function We(t,e){return Ue(t,Wt(e))}function Xe(t,e,n){var r,o;if(e=Ht(e,n),Ae(t))for(r=0,o=t.length;r<o;r++)e(t[r],r,t);else{var i=lt(t);for(r=0,o=i.length;r<o;r++)e(t[i[r]],i[r],t)}return t}function He(t,e,n){e=Gt(e,n);for(var r=!Ae(t)&&lt(t),o=(r||t).length,i=Array(o),u=0;u<o;u++){var l=r?r[u]:u;i[u]=e(t[l],l,t)}return i}function Ke(t){var e=function(e,n,r,o){var i=!Ae(e)&&lt(e),u=(i||e).length,l=t>0?0:u-1;for(o||(r=e[i?i[l]:l],l+=t);l>=0&&l<u;l+=t){var c=i?i[l]:l;r=n(r,e[c],c,e)}return r};return function(t,n,r,o){var i=arguments.length>=3;return e(t,Ht(n,o,4),r,i)}}const Ye=Ke(1),Ge=Ke(-1);function Qe(t,e,n){var r=[];return e=Gt(e,n),Xe(t,(function(t,n,o){e(t,n,o)&&r.push(t)})),r}function Ze(t,e,n){return Qe(t,Ie(Gt(e)),n)}function tn(t,e,n){e=Gt(e,n);for(var r=!Ae(t)&&lt(t),o=(r||t).length,i=0;i<o;i++){var u=r?r[i]:i;if(!e(t[u],u,t))return!1}return!0}function en(t,e,n){e=Gt(e,n);for(var r=!Ae(t)&&lt(t),o=(r||t).length,i=0;i<o;i++){var u=r?r[i]:i;if(e(t[u],u,t))return!0}return!1}function nn(t,e,n,r){return Ae(t)||(t=Lt(t)),("number"!=typeof n||r)&&(n=0),ze(t,e,n)>=0}const rn=x((function(t,e,n){var r,o;return J(e)?o=e:(e=Rt(e),r=e.slice(0,-1),e=e[e.length-1]),He(t,(function(t){var i=o;if(!i){if(r&&r.length&&(t=Vt(t,r)),null==t)return;i=t[e]}return null==i?i:i.apply(t,n)}))}));function on(t,e){return He(t,Xt(e))}function un(t,e){return Qe(t,Wt(e))}function ln(t,e,n){var r,o,i=-1/0,u=-1/0;if(null==e||"number"==typeof e&&"object"!=typeof t[0]&&null!=t)for(var l=0,c=(t=Ae(t)?t:Lt(t)).length;l<c;l++)null!=(r=t[l])&&r>i&&(i=r);else e=Gt(e,n),Xe(t,(function(t,n,r){((o=e(t,n,r))>u||o===-1/0&&i===-1/0)&&(i=t,u=o)}));return i}function cn(t,e,n){var r,o,i=1/0,u=1/0;if(null==e||"number"==typeof e&&"object"!=typeof t[0]&&null!=t)for(var l=0,c=(t=Ae(t)?t:Lt(t)).length;l<c;l++)null!=(r=t[l])&&r<i&&(i=r);else e=Gt(e,n),Xe(t,(function(t,n,r){((o=e(t,n,r))<u||o===1/0&&i===1/0)&&(i=t,u=o)}));return i}function an(t,e,n){if(null==e||n)return Ae(t)||(t=Lt(t)),t[ne(t.length-1)];var r=Ae(t)?Dt(t):Lt(t),o=it(r);e=Math.max(Math.min(e,o),0);for(var i=o-1,u=0;u<e;u++){var l=ne(u,i),c=r[u];r[u]=r[l],r[l]=c}return r.slice(0,e)}function fn(t){return an(t,1/0)}function sn(t,e,n){var r=0;return e=Gt(e,n),on(He(t,(function(t,n,o){return{value:t,index:r++,criteria:e(t,n,o)}})).sort((function(t,e){var n=t.criteria,r=e.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(n<r||void 0===r)return-1}return t.index-e.index})),"value")}function dn(t,e){return function(n,r,o){var i=e?[[],[]]:{};return r=Gt(r,o),Xe(n,(function(e,o){var u=r(e,o,n);t(i,e,u)})),i}}const pn=dn((function(t,e,n){X(t,n)?t[n].push(e):t[n]=[e]})),hn=dn((function(t,e,n){t[n]=e})),vn=dn((function(t,e,n){X(t,n)?t[n]++:t[n]=1})),yn=dn((function(t,e,n){t[n?0:1].push(e)}),!0);var gn=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;function mn(t){return t?W(t)?f.call(t):_(t)?t.match(gn):Ae(t)?He(t,Ut):Lt(t):[]}function bn(t){return null==t?0:Ae(t)?t.length:lt(t).length}function jn(t,e,n){return e in n}const wn=x((function(t,e){var n={},r=e[0];if(null==t)return n;J(r)?(e.length>1&&(r=Ht(r,e[1])),e=yt(t)):(r=jn,e=xe(e,!1,!1),t=Object(t));for(var o=0,i=e.length;o<i;o++){var u=e[o],l=t[u];r(l,u,t)&&(n[u]=l)}return n})),Sn=x((function(t,e){var n,r=e[0];return J(r)?(r=Ie(r),e.length>1&&(n=e[1])):(e=He(xe(e,!1,!1),String),r=function(t,n){return!nn(e,n)}),wn(t,r,n)}));function An(t,e,n){return f.call(t,0,Math.max(0,t.length-(null==e||n?1:e)))}function xn(t,e,n){return null==t||t.length<1?null==e||n?void 0:[]:null==e||n?t[0]:An(t,t.length-e)}function Cn(t,e,n){return f.call(t,null==e||n?1:e)}function En(t,e,n){return null==t||t.length<1?null==e||n?void 0:[]:null==e||n?t[t.length-1]:Cn(t,Math.max(0,t.length-e))}function Tn(t){return Qe(t,Boolean)}function Ln(t,e){return xe(t,e,!1)}const kn=x((function(t,e){return e=xe(e,!0,!0),Qe(t,(function(t){return!nn(e,t)}))})),On=x((function(t,e){return kn(t,e)}));function _n(t,e,n,r){L(e)||(r=n,n=e,e=!1),null!=n&&(n=Gt(n,r));for(var o=[],i=[],u=0,l=it(t);u<l;u++){var c=t[u],a=n?n(c,u,t):c;e&&!n?(u&&i===a||o.push(c),i=a):n?nn(i,a)||(i.push(a),o.push(c)):nn(o,c)||o.push(c)}return o}const In=x((function(t){return _n(xe(t,!0,!0))}));function Pn(t){for(var e=[],n=arguments.length,r=0,o=it(t);r<o;r++){var i=t[r];if(!nn(e,i)){var u;for(u=1;u<n&&nn(arguments[u],i);u++);u===n&&e.push(i)}}return e}function Nn(t){for(var e=t&&ln(t,it).length||0,n=Array(e),r=0;r<e;r++)n[r]=on(t,r);return n}const Mn=x(Nn);function qn(t,e){for(var n={},r=0,o=it(t);r<o;r++)e?n[t[r]]=e[r]:n[t[r][0]]=t[r][1];return n}function Bn(t,e,n){null==e&&(e=t||0,t=0),n||(n=e<t?-1:1);for(var r=Math.max(Math.ceil((e-t)/n),0),o=Array(r),i=0;i<r;i++,t+=n)o[i]=t;return o}function Dn(t,e){if(null==e||e<1)return[];for(var n=[],r=0,o=t.length;r<o;)n.push(f.call(t,r,r+=e));return n}function Fn(t,e){return t._chain?ft(e).chain():e}function Jn(t){return Xe(_t(t),(function(e){var n=ft[e]=t[e];ft.prototype[e]=function(){var t=[this._wrapped];return a.apply(t,arguments),Fn(this,n.apply(ft,t))}})),ft}Xe(["pop","push","reverse","shift","sort","splice","unshift"],(function(t){var e=u[t];ft.prototype[t]=function(){var n=this._wrapped;return null!=n&&(e.apply(n,arguments),"shift"!==t&&"splice"!==t||0!==n.length||delete n[0]),Fn(this,n)}})),Xe(["concat","join","slice"],(function(t){var e=u[t];ft.prototype[t]=function(){var t=this._wrapped;return null!=t&&(t=e.apply(t,arguments)),Fn(this,t)}}));const Rn=ft;var Vn=Jn(e);Vn._=Vn;let zn=function(){let t=document.querySelector("#projectsContainer");console.log(t);let e=document.querySelector("#todoContainer");function o(t,n){let r=document.createElement("div");r.setAttribute("id",`${t.title}div`),r.classList.add("todoCard");let o={unopened:"div",firstTwo:"div",lastTwo:"div",deleteTodo:"button",checkbox:"div",expand:"div",down:"img",editTodo:"div",pencil:"img"},l={};for(let t in o)l[t]=document.createElement(o[t]),l[t].classList.add(t);l.deleteTodo.textContent="X",l.deleteTodo.addEventListener("click",(function(){i(t,n)})),l.checkbox.style.border="2px solid #2B2B2B",l.checkbox.addEventListener("click",(()=>{l.checkbox.style.backgroundColor="#2B2B2B",l.checkbox.style.color="white",l.checkbox.textContent="✓",setTimeout((function(){i(t,n)}),1e3)})),l.down.setAttribute("src","https://www.shareicon.net/data/512x512/2015/12/06/683057_arrows_512x512.png"),l.expand.appendChild(l.down),l.down.addEventListener("click",(function(){if(r.querySelector(".description")){let t=r.querySelector(".description");r.removeChild(t),l.down.style.cssText="transform: scaleY(1)",r.removeChild(l.editTodo)}else u(t,"description","p",r),l.down.style.cssText="transform: scaleY(-1)",r.appendChild(l.editTodo)})),l.pencil.setAttribute("src","http://simpleicon.com/wp-content/uploads/pencil.png"),l.editTodo.appendChild(l.pencil),l.editTodo.addEventListener("click",(()=>{c(n,t)})),l.firstTwo.appendChild(l.checkbox),u(t,"title","h2",l.firstTwo),u(t,"dueDate","p",l.lastTwo),u(t,"priority","p",l.lastTwo),l.lastTwo.appendChild(l.deleteTodo),l.unopened.appendChild(l.firstTwo),l.unopened.appendChild(l.lastTwo),r.appendChild(l.unopened),r.appendChild(l.expand),e.appendChild(r)}function i(t,e){let n=JSON.parse(localStorage.getItem("projList")),o=new r(e.title);o.list=e.list,o.deleteTodo(t);for(let t=0;t<n.length;t++)o.title==n[t].title&&(console.log(o.title),n[t]=o);a(o),localStorage.setItem("projList",JSON.stringify(n))}function u(t,e,n,r){let o=document.createElement(n);if(o.textContent=t[e],"priority"==e)switch(t[e]){case"High":o.style.backgroundColor="#fa8072";break;case"Medium":o.style.backgroundColor="#FFFF00";break;case"Low":o.style.backgroundColor="#90ee90"}o.classList.add(`${e}`),r.appendChild(o)}function l(t,e){let n=document.createElement("option");n.setAttribute("value",t),n.textContent=t,e.appendChild(n)}function c(r,o){document.querySelector("body"),e.style.filter="blur(5px)",t.style.filter="blur(5px)";let i=document.querySelector("#popupContainer"),u={title:"text",description:"text",dueDate:"date",priority:"text",submit:"submit",cancel:"button"},c=document.createElement("div");c.setAttribute("id","todoPopup");let f=document.createElement("h2");f.textContent="Add A New Todo",f.setAttribute("id","welcome"),c.appendChild(f);for(let f in u){let s;"priority"==f?(s=document.createElement("select"),l("High",s),l("Medium",s),l("Low",s)):(s=document.createElement("input"),s.setAttribute("type",u[f]),s.setAttribute("placeholder",f),null!=o&&"submit"!=f&&s.setAttribute("value",o[f])),s.classList.add("todoInput"),"submit"==s.getAttribute("type")?s.addEventListener("click",(()=>{let u=Array.from(document.querySelectorAll(".todoInput")).map((function(t){if("submit"!=t.getAttribute("type"))return t.value}));if(console.table(u),null==o){let t=new n(u[0],u[1],u[2],u[3]);r.list.push(t),a(r)}else o.title=u[0],o.description=u[1],o.dueDate=u[2],o.priority=u[3],a(r);console.log(r),d(r),e.style.filter="none",t.style.filter="none",i.removeChild(c)})):"button"==s.getAttribute("type")&&(console.log("das"),s.setAttribute("value","Cancel"),s.setAttribute("id","cancelTodo"),s.addEventListener("click",(()=>{i.removeChild(c),e.style.filter="none",t.style.filter="none"}))),c.appendChild(s)}i.appendChild(c)}function a(t){console.log(JSON.stringify(t,null,4)),e.textContent="";for(let e=0;e<t.list.length;e++)o(t.list[e],t);let n=document.createElement("button");n.classList.add("addTodo"),n.textContent="+ Add Todo",n.addEventListener("click",(()=>{c(t)})),e.appendChild(n)}function f(e){let n=document.querySelector("#addProj");if(function(t){let e=document.querySelectorAll(".projectLink");for(let n=0;n<e.length;n++)if(console.log(e[n]),e[n].getAttribute("id")==t.title)return!0;return!1}(e))return 0;let r=document.createElement("div");r.setAttribute("id",e.title),r.classList.add("projectLink");let o=document.createElement("p");o.textContent=`${e.title}`,"Today"!=e.title&&(r.addEventListener("mouseenter",(()=>{if(null==document.querySelector(".deleteProj")){let t=document.createElement("button");t.style="background: none; \n                    font-weight: bold; \n                    color: #362222; \n                    font-size: 25px; \n                    font-family: inherit;\n                    border: none;\n                    ",t.classList.add("deleteProj"),t.textContent="X",t.addEventListener("click",(()=>{s(e)})),r.appendChild(t)}})),r.addEventListener("mouseleave",(()=>{if(r.classList.contains("current"))return 0;let t=document.querySelector(".deleteProj");r.removeChild(t)}))),r.appendChild(o),r.addEventListener("click",(()=>{if(console.log(t),document.querySelectorAll("#projectsContainer div").forEach((t=>{t.classList.remove("current"),null!=t.querySelector(".deleteProj")&&"Today"!=r.getAttribute("id")&&t.removeChild(t.querySelector(".deleteProj"))})),null==document.querySelector(".deleteProj")&&"Today"!=r.getAttribute("id")){let t=document.createElement("button");t.style="background: none; \n                    font-weight: bold; \n                    color: #362222; \n                    font-size: 25px; \n                    font-family: inherit;\n                    border: none;\n                    ",t.classList.add("deleteProj"),t.textContent="X",t.addEventListener("click",(()=>{s(e)})),r.appendChild(t)}r.classList.add("current"),a(e)})),t.insertBefore(r,n),d(e)}function s(e){let n=document.querySelectorAll(".projectLink"),r=JSON.parse(localStorage.getItem("projList"));for(let o=0;o<n.length;o++)if(e.title==n[o].getAttribute("id"))return t.removeChild(n[o]),r.splice(o,1),localStorage.setItem("projList",JSON.stringify(r)),0}function d(t){if(null!=localStorage.getItem("projList")){let e=JSON.parse(localStorage.getItem("projList"));for(let n=0;n<e.length;n++)if(e[n].title==t.title)return e[n]=t,localStorage.setItem("projList",JSON.stringify(e)),0;e.push(t),console.log(e),localStorage.setItem("projList",JSON.stringify(e))}}return{createTodoCard:o,addCardItem:u,addProjectToTree:f,popup:function(t){if(null!=document.querySelector(".pressed"))return function(t){t.textContent="";let e=document.createElement("p");e.textContent="+ Add Project",e.setAttribute("id","addText"),t.appendChild(e),t.removeAttribute("class")}(t),0;if(null!=document.querySelector("#projForm"))return 0;t.textContent="";let e=document.createElement("div");e.setAttribute("id","projForm");let n=document.createElement("input");n.setAttribute("type","text"),n.setAttribute("id","projInput"),n.setAttribute("placeholder","Project Name");let o=document.createElement("button");o.textContent="Add",o.addEventListener("click",(()=>{f(new r(n.value)),t.classList.toggle("pressed")}));let i=document.createElement("button");i.textContent="Cancel",i.addEventListener("click",(()=>{t.classList.toggle("pressed")})),o.setAttribute("id","add"),i.setAttribute("id","cancl"),e.appendChild(n),e.appendChild(o),e.appendChild(i),t.appendChild(e)},loadProject:a}}();if(null!=localStorage.getItem("projList")){console.log("bruh");let t=JSON.parse(localStorage.getItem("projList"));for(let e=0;e<t.length;e++)zn.addProjectToTree(t[e]),0==e&&zn.loadProject(t[e])}else{let t=new r("Today");zn.addProjectToTree(t),zn.loadProject(t);let e=[];e.push(t),console.log(e),localStorage.setItem("projList",JSON.stringify(e))}let $n=document.querySelector("#addProj");$n.addEventListener("click",(()=>{zn.popup($n)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,